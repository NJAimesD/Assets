ML Proyect

##pip install yfinance

import pandas as pd
import yfinance as yf
import numpy as np

#GetFacebookInformation = yf.Ticker("META")
#print(GetFacebookInformation.history(period="3d"))

#listcandidates = ['META','AMZN', 'NVDA']
#data1= yf.download(listcandidates, start='2021-01-01')
#precio1 = data1.drop(["Open","Low","Close","High", "Volume"], axis = 1)
#print(precio1)

#download the list of all tickers in S&P

def list_wikipedia_sp500() -> pd.DataFrame:
    # Ref: https://stackoverflow.com/a/75845569/
    url = 'https://en.m.wikipedia.org/wiki/List_of_S%26P_500_companies'
    return pd.read_html(url, attrs={'id': 'constituents'}, index_col='Symbol')[0]

df = list_wikipedia_sp500()

symbolslist = df.index.to_list()
#type(symbolslist)


symbolslist.remove("BRK.B")
symbolslist.remove("BF.B")
#Manually removed the two stocks that were not available for download

SPInfo = yf.download(symbolslist, start = '2021-01-01')
#download all the quotes for those tickers

SPPrices = SPInfo.drop(["Open","Low","Close","High", "Volume"], axis = 1)
#remove everything but adj close pirce
#here now we have clear information to work with

#to calculate returns per stock

returnslog = np.log(SPPrices)
#calculates the natural log

#print(returnslog)

compoundedreturns = returnslog.diff()
#it shows the difference between two consecutive values

print(compoundedreturns)

cretunrsmean = compoundedreturns.dropna().mean(axis=0)
cretunrsmeandf = cretunrsmean.to_frame()

expectedreturn = (np.exp(cretunrsmeandf))-1
print(expectedreturn)
type(expectedreturn)

#calcualate risk per stock


