ML Proyect

##pip install yfinance
import pandas as pd
import yfinance as yf
import numpy as np

#other options to download info
#GetFacebookInformation = yf.Ticker("META")
#print(GetFacebookInformation.history(period="3d"))
#listcandidates = ['META','AMZN', 'NVDA']
#data1= yf.download(listcandidates, start='2021-01-01')
#precio1 = data1.drop(["Open","Low","Close","High", "Volume"], axis = 1)
#print(precio1)

#download the list of all tickers in S&P
def list_wikipedia_sp500() -> pd.DataFrame:
    # Ref: https://stackoverflow.com/a/75845569/
    url = 'https://en.m.wikipedia.org/wiki/List_of_S%26P_500_companies'
    return pd.read_html(url, attrs={'id': 'constituents'}, index_col='Symbol')[0]

df = list_wikipedia_sp500()
symbolslist = df.index.to_list()
#type(symbolslist)

symbolslist.remove("BRK.B")
symbolslist.remove("BF.B")
#Manually removed the two stocks that were not available for download

SPInfo = yf.download(symbolslist, start = '2021-01-01')
#download all the quotes for those tickers

#create returns
SPPrices = SPInfo.drop(["Open","Low","Close","High", "Volume"], axis = 1)
#remove everything but adj close pirce


#to calculate compound returns per stock
returnslog = np.log(SPPrices)
#calculates the natural log
#print(returnslog)
compoundedreturns = returnslog.diff()
#it shows the difference between two consecutive values
print(compoundedreturns)

#calculate expected returns
cretunrsmean = compoundedreturns.dropna().mean(axis=0)
cretunrsmeandf = cretunrsmean.to_frame()
expectedreturn = (np.exp(cretunrsmeandf))-1
print(expectedreturn)
type(expectedreturn)

#calcualate risk(std dev) per stock
riskstock = compoundedreturns.std()
print(riskstock)

#create weight matrix
#print (np.random.dirichlet(np.ones(10)*1000.,size=1))

weightlist = [[0.10212115, 0.10540809, 0.09641391, 0.09434661, 0.10166987, 0.09809346,
  0.1009097,  0.09827027, 0.10157224, 0.10119471],[0.09845478, 0.10154262, 0.09904778, 0.10855926, 0.096898,   0.10115958,
  0.09955318, 0.10229371, 0.0968331,  0.09565799],[0.09627329, 0.10611257, 0.10466319, 0.09885515, 0.09796454, 0.10060053,
  0.09687062, 0.10290061, 0.10028442, 0.09547507],[0.10085925, 0.10292469, 0.10064367, 0.1070296,  0.09646053, 0.10167471,
  0.09735778, 0.09867557, 0.09551881, 0.09885539],[0.09100497, 0.09988654, 0.09821814, 0.10116053, 0.10298152, 0.10241508,
  0.10210152, 0.09870569, 0.10135531, 0.1021707 ],[0.09874364, 0.10297793, 0.10113034, 0.09786783, 0.10067874, 0.1008704,
  0.10009689, 0.10151503, 0.09891594, 0.09720325],[0.09420248, 0.10245806, 0.10383975, 0.09369589, 0.09899058, 0.09968072,
  0.10282011, 0.09970699, 0.10359345, 0.10101196],[0.09490454, 0.10132378, 0.10080325, 0.10232655, 0.09563291, 0.09790839,
  0.10653241, 0.0990005,  0.10313383, 0.09843385],[0.09618971, 0.10036954, 0.10087412, 0.10154237, 0.09785653, 0.10018575,
  0.09933346, 0.10238214, 0.09803831, 0.10322808],[0.10339979, 0.10251735, 0.09593621, 0.09910007, 0.09815854, 0.09997532,
  0.10145792, 0.09745016, 0.10015209, 0.10185255]]

#columns=['weigth1','weigth2','weigth3','weigth4','weigth5','weigth6','weigth7','weigth8','weigth9','weigth10']

#print(weightlist)

wmatrix = pd.DataFrame(weightlist, columns=['weigth1','weigth2','weigth3','weigth4','weigth5','weigth6','weigth7','weigth8','weigth9','weigth10'] )
print(wmatrix)


#create portfolios

#expected return of portfolio
    #weights * expected return
#select 10 stocks from expected return
highexreturn = expectedreturn['expected return per stock'].nlargest(n=10)
print(highexreturn)

erp = highexreturn.multiply(wmatrix)

#expected risk of portfololio
    #expected variance port = transpose weight*cov matrix*weights
    #e risk = square root(diagonale del e variance port)


portfolio.optim in r - tseries package




